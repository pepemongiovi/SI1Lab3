package controller;



import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import java.util.Collection;
import java.util.List;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import model.Task;
import model.ToDoList;
import service.ToDoListService;

@CrossOrigin(origins="*")
@RestController
public class ToDoListCtrl {
	
	@Autowired
	ToDoListService toDoListService;
	
	// Routes (End Points)
	
	@RequestMapping(method=RequestMethod.GET, value="/toDoList", produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Collection<ToDoList>> retornarListaDeTarefas() {
		
		Collection<ToDoList> listaDeTarefas = toDoListService.buscaTarefas();
		
		return new ResponseEntity<>(listaDeTarefas, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.GET, value="/toDoList/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ToDoList> retornaListaDeTarefasEspecifica(@PathVariable Long id) {
		
		ListaDeTarefas listaDeTarefas = toDoListService.buscaPorId(id);
		
		if(listaDeTarefas == null)
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		
		return new ResponseEntity<>(listaDeTarefas, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.POST, value="/toDoList", consumes=MediaType.APPLICATION_JSON_VALUE, produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ToDoList> cadastrarTarefa(@RequestBody ToDoList toDoList) {
		
		ToDoList listaDeTarefasCadastradas = toDoListService.salvarNoBanco(toDoList);
		
		return new ResponseEntity<>(listaDeTarefasCadastradas, HttpStatus.CREATED);
	}
	
	@RequestMapping(method=RequestMethod.PUT, value="/toDoList", consumes=MediaType.APPLICATION_JSON_VALUE, produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ToDoList> editToDoList(@RequestBody ToDoList newToDoList) {
		
		ToDoList toDoList = toDoListService.saveInDB(newToDoList);
		
		return new ResponseEntity<>(toDoList, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.DELETE, value="/toDoList/{id}")
	public ResponseEntity<Task> deleteListByID(@PathVariable Long id) {
		
		ToDoList toDoList = toDoListService.getByID(id);
		
		if(toDoList == null)
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		
		toDoListService.deleteList(toDoList);
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.GET, value="/toDoList/{id}/tasks")
	public ResponseEntity<Collection<Task>> getTasksByListID(@PathVariable Long id) {
		
		ToDoList toDoList = toDoListService.getByID(id);
		
		if(toDoList == null)
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		
		List<Task> tasks = toDoList.getTasks();
		
		return new ResponseEntity<>(tasks, HttpStatus.OK);
	}
}
