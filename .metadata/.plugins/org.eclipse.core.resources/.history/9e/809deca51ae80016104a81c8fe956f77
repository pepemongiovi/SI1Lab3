package controller;

import org.hibernate.mapping.Collection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import model.Priority;
import model.Task;
import repository.TaskRepository;
import service.TaskService;

public class TaskCtrl {
	
	@Autowired
	TaskService taskService;
	
	// Routes (End Points)
	
	@RequestMapping(method=RequestMethod.GET, value="/tasks", produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Collection> getTasks() {
		
		Collection tasks = (Collection) taskService.searchTasks();
		
		return new ResponseEntity<>(tasks, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.GET, value="/tarefas/{id}", produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Tarefa> retornaTarefaEspecifica(@PathVariable Long id) {
		
		Tarefa tarefa = tarefaService.buscaPorId(id);
		
		if(tarefa == null)
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		
		return new ResponseEntity<>(tarefa, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.POST, value="/tarefas", consumes=MediaType.APPLICATION_JSON_VALUE, produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Tarefa> cadastrarTarefa(@RequestBody Tarefa tarefa) {
		
		Tarefa tarefaCadastrado = tarefaService.salvarNoBanco(tarefa);
		
		return new ResponseEntity<>(tarefaCadastrado, HttpStatus.CREATED);
	}
	
	@RequestMapping(method=RequestMethod.PUT, value="/tarefas", consumes=MediaType.APPLICATION_JSON_VALUE, produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Tarefa> editarTarefa(@RequestBody Tarefa tarefa) {
		
		Tarefa tarefaEditada = tarefaService.salvarNoBanco(tarefa);
		
		return new ResponseEntity<>(tarefaEditada, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.DELETE, value="/tarefas/{id}")
	public ResponseEntity<Tarefa> removerTarefa(@PathVariable Long id) {
		
		Tarefa tarefaEncontrada = tarefaService.buscaPorId(id);
		
		if(tarefaEncontrada == null)
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		
		tarefaService.excluirTarefa(tarefaEncontrada);
		return new ResponseEntity<>(HttpStatus.OK);
	}	
}
